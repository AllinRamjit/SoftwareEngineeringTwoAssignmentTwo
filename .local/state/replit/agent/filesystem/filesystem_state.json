{"file_contents":{"gunicorn_config.py":{"content":"# gunicorn_config.py\nimport multiprocessing\n\n# The socket to bind.\n# \"0.0.0.0\" to bind to all interfaces. 8000 is the port number.\nbind = \"0.0.0.0:8080\"\n\n# The number of worker processes for handling requests.\nworkers = 4\n\n# Use the 'gevent' worker type for async performance.\nworker_class = 'gevent'\n\n# Log level\nloglevel = 'info'\n\n# Where to log to\naccesslog = '-'  # '-' means log to stdout\nerrorlog = '-'  # '-' means log to stderr","size_bytes":435},"readme.md":{"content":"[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/uwidcit/flaskmvc)\n<a href=\"https://render.com/deploy?repo=https://github.com/uwidcit/flaskmvc\">\n  <img src=\"https://render.com/images/deploy-to-render-button.svg\" alt=\"Deploy to Render\">\n</a>\n\n![Tests](https://github.com/uwidcit/flaskmvc/actions/workflows/dev.yml/badge.svg)\n\n# Flask MVC Template\nA template for flask applications structured in the Model View Controller pattern [Demo](https://dcit-flaskmvc.herokuapp.com/). [Postman Collection](https://documenter.getpostman.com/view/583570/2s83zcTnEJ)\n\n\n# Dependencies\n* Python3/pip3\n* Packages listed in requirements.txt\n\n# Installing Dependencies\n```bash\n$ pip install -r requirements.txt\n```\n\n# Configuration Management\n\n\nConfiguration information such as the database url/port, credentials, API keys etc are to be supplied to the application. However, it is bad practice to stage production information in publicly visible repositories.\nInstead, all config is provided by a config file or via [environment variables](https://linuxize.com/post/how-to-set-and-list-environment-variables-in-linux/).\n\n## In Development\n\nWhen running the project in a development environment (such as gitpod) the app is configured via default_config.py file in the App folder. By default, the config for development uses a sqlite database.\n\ndefault_config.py\n```python\nSQLALCHEMY_DATABASE_URI = \"sqlite:///temp-database.db\"\nSECRET_KEY = \"secret key\"\nJWT_ACCESS_TOKEN_EXPIRES = 7\nENV = \"DEVELOPMENT\"\n```\n\nThese values would be imported and added to the app in load_config() function in config.py\n\nconfig.py\n```python\n# must be updated to inlude addtional secrets/ api keys & use a gitignored custom-config file instad\ndef load_config():\n    config = {'ENV': os.environ.get('ENV', 'DEVELOPMENT')}\n    delta = 7\n    if config['ENV'] == \"DEVELOPMENT\":\n        from .default_config import JWT_ACCESS_TOKEN_EXPIRES, SQLALCHEMY_DATABASE_URI, SECRET_KEY\n        config['SQLALCHEMY_DATABASE_URI'] = SQLALCHEMY_DATABASE_URI\n        config['SECRET_KEY'] = SECRET_KEY\n        delta = JWT_ACCESS_TOKEN_EXPIRES\n...\n```\n\n## In Production\n\nWhen deploying your application to production/staging you must pass\nin configuration information via environment tab of your render project's dashboard.\n\n![perms](./images/fig1.png)\n\n# Flask Commands\n\nwsgi.py is a utility script for performing various tasks related to the project. You can use it to import and test any code in the project. \nYou just need create a manager command function, for example:\n\n```python\n# inside wsgi.py\n\nuser_cli = AppGroup('user', help='User object commands')\n\n@user_cli.cli.command(\"create-user\")\n@click.argument(\"username\")\n@click.argument(\"password\")\ndef create_user_command(username, password):\n    create_user(username, password)\n    print(f'{username} created!')\n\napp.cli.add_command(user_cli) # add the group to the cli\n\n```\n\nThen execute the command invoking with flask cli with command name and the relevant parameters\n\n```bash\n$ flask user create bob bobpass\n```\n\n\n# Running the Project\n\n_For development run the serve command (what you execute):_\n```bash\n$ flask run\n```\n\n_For production using gunicorn (what the production server executes):_\n```bash\n$ gunicorn wsgi:app\n```\n\n# Deploying\nYou can deploy your version of this app to render by clicking on the \"Deploy to Render\" link above.\n\n# Initializing the Database\nWhen connecting the project to a fresh empty database ensure the appropriate configuration is set then file then run the following command. This must also be executed once when running the app on heroku by opening the heroku console, executing bash and running the command in the dyno.\n\n```bash\n$ flask init\n```\n\n# Database Migrations\nIf changes to the models are made, the database must be'migrated' so that it can be synced with the new models.\nThen execute following commands using manage.py. More info [here](https://flask-migrate.readthedocs.io/en/latest/)\n\n```bash\n$ flask db init\n$ flask db migrate\n$ flask db upgrade\n$ flask db --help\n```\n\n# Testing\n\n## Unit & Integration\nUnit and Integration tests are created in the App/test. You can then create commands to run them. Look at the unit test command in wsgi.py for example\n\n```python\n@test.command(\"user\", help=\"Run User tests\")\n@click.argument(\"type\", default=\"all\")\ndef user_tests_command(type):\n    if type == \"unit\":\n        sys.exit(pytest.main([\"-k\", \"UserUnitTests\"]))\n    elif type == \"int\":\n        sys.exit(pytest.main([\"-k\", \"UserIntegrationTests\"]))\n    else:\n        sys.exit(pytest.main([\"-k\", \"User\"]))\n```\n\nYou can then execute all user tests as follows\n\n```bash\n$ flask test user\n```\n\nYou can also supply \"unit\" or \"int\" at the end of the comand to execute only unit or integration tests.\n\nYou can run all application tests with the following command\n\n```bash\n$ pytest\n```\n\n## Test Coverage\n\nYou can generate a report on your test coverage via the following command\n\n```bash\n$ coverage report\n```\n\nYou can also generate a detailed html report in a directory named htmlcov with the following comand\n\n```bash\n$ coverage html\n```\n\n# Troubleshooting\n\n## Views 404ing\n\nIf your newly created views are returning 404 ensure that they are added to the list in main.py.\n\n```python\nfrom App.views import (\n    user_views,\n    index_views\n)\n\n# New views must be imported and added to this list\nviews = [\n    user_views,\n    index_views\n]\n```\n\n## Cannot Update Workflow file\n\nIf you are running into errors in gitpod when updateding your github actions file, ensure your [github permissions](https://gitpod.io/integrations) in gitpod has workflow enabled ![perms](./images/gitperms.png)\n\n## Database Issues\n\nIf you are adding models you may need to migrate the database with the commands given in the previous database migration section. Alternateively you can delete you database file.\n","size_bytes":5871},"render.yaml":{"content":"\nservices:\n- type: web\n  name: flask-postgres-api\n  env: python\n  repo: https://github.com/uwidcit/flaskmvc.git\n  plan: free\n  branch: main\n  healthCheckPath: /healthcheck\n  buildCommand: \"pip install -r requirements.txt\"\n  startCommand: \"gunicorn wsgi:app\"\n  envVars:\n  - fromGroup: flask-postgres-api-settings\n  - key: POSTGRES_URL\n    fromDatabase:\n      name: flask-postgres-api-db\n      property: host\n  - key: POSTGRES_USER\n    fromDatabase:\n      name: flask-postgres-api-db\n      property: user\n  - key: POSTGRES_PASSWORD\n    fromDatabase:\n      name: flask-postgres-api-db\n      property: password\n  - key: POSTGRES_DB\n    fromDatabase:\n      name: flask-postgres-api-db\n      property: database \n\nenvVarGroups:\n- name: flask-postgres-api-settings\n  envVars:\n  - key: ENV\n    value: production\n  - key: FLASK_APP\n    value: wsgi.py\n    \n\ndatabases:\n- name: flask-postgres-api-db\n  plan: free\n  databaseName: mydb","size_bytes":921},"wsgi.py":{"content":"import click\nimport pytest\nimport sys\nimport uuid\nfrom flask.cli import AppGroup\n\nfrom App.database import get_migrate, db\nfrom sqlalchemy import desc\nfrom App.models import User\nfrom App.main import create_app\nfrom App.controllers import (create_user, get_all_users_json, get_all_users,\n                             initialize)\nfrom App.models.user import Student, LeaderBoardEntry, Accolade, ActivityLog, Staff\n\n# This commands file allow you to create convenient CLI commands for testing controllers\n\napp = create_app()\nmigrate = get_migrate(app)\n\n\n# This command creates and initializes the database\n@app.cli.command(\"init\", help=\"Creates and initializes the database\")\ndef init():\n    initialize()\n\n    # Check if users already exist before creating them\n    if not User.query.filter_by(username='bob').first():\n        bob = User(username='bob', password='bobpass')\n        db.session.add(bob)\n        print('Created user: bob')\n    else:\n        print('User bob already exists')\n\n    if not User.query.filter_by(username='sally').first():\n        sally = User(username='sally', password='sallypass')\n        db.session.add(sally)\n        print('Created user: sally')\n    else:\n        print('User sally already exists')\n\n    if not User.query.filter_by(username='rob').first():\n        rob = User(username='rob', password='robpass')\n        db.session.add(rob)\n        print('Created user: rob')\n    else:\n        print('User rob already exists')\n\n    # Create students\n    if not Student.query.filter_by(username='student1').first():\n        student1 = Student(username='student1', password='student1pass')\n        db.session.add(student1)\n        print('Created student: student1')\n    else:\n        print('Student student1 already exists')\n        student1 = Student.query.filter_by(username='student1').first()\n\n    if not Student.query.filter_by(username='student2').first():\n        student2 = Student(username='student2', password='student2pass')\n        db.session.add(student2)\n        print('Created student: student2')\n    else:\n        print('Student student2 already exists')\n        student2 = Student.query.filter_by(username='student2').first()\n\n    # Create staff\n    if not Staff.query.filter_by(username='staff1').first():\n        staff1 = Staff(username='staff1', password='staff1pass')\n        db.session.add(staff1)\n        print('Created staff: staff1')\n    else:\n        print('Staff staff1 already exists')\n\n    if not Staff.query.filter_by(username='staff2').first():\n        staff2 = Staff(username='staff2', password='staff2pass')\n        db.session.add(staff2)\n        print('Created staff: staff2')\n    else:\n        print('Staff staff2 already exists')\n    db.session.commit()\n    print('database intialized')\n\n\n'''\nUser Commands\n'''\n\n\n@app.cli.command(\"staff-log-hours\", help=\"Staff log hours for a student\")\n@click.argument('staff_username', default='staff1')\n@click.argument('student_username', default='student1')\n@click.argument('hours', default='10')\n@click.argument('activity', default='community service')\ndef staff_log_hours_command(staff_username, student_username, hours, activity):\n    staff = Staff.query.filter_by(username=staff_username).first()\n    student = Student.query.filter_by(username=student_username).first()\n    if not staff:\n        print(f'Staff {staff_username} not found!')\n        return\n    if not student:\n        print(f'Student {student_username} not found!')\n        return\n    log = staff.logHoursForStudent(student.studentID, int(hours), activity)\n    db.session.commit()\n    print(\n        f'Staff {staff_username} logged {hours} hours for student {student_username}'\n    )\n    print(f'Activity: {activity}')\n    print(f'Log ID: {log.logID}')\n\n\n@app.cli.command(\"request-confirmation\",\n                 help=\"Student request confirmation of hours\")\n@click.argument('student_username', default='student1')\n@click.argument('activity_log_id')\ndef request_confirmation_command(student_username, activity_log_id):\n    student = Student.query.filter_by(username=student_username).first()\n    if not student:\n        print(f'Student {student_username} not found!')\n        return\n    activity_log = ActivityLog.query.filter_by(\n        logID=activity_log_id, studentID=student.studentID).first()\n    if not activity_log:\n        print(\n            f'Activity log {activity_log_id} not found for student {student_username}!'\n        )\n        return\n    student.requestConfirmationOfHours(activity_log_id)\n    print(\n        f'Student {student_username} requested confirmation for activity log {activity_log_id}'\n    )\n    print('Status changed to: pending')\n\n\n@app.cli.command(\"view-leaderboard\",\n                 help=\"View student leaderboard ranked by confirmed hours\")\ndef view_leaderboard_command():\n    # Get all students with confirmed hours\n    students = Student.query.all()\n    leaderboard_data = []\n\n    for student in students:\n        confirmed_logs = ActivityLog.query.filter_by(\n            studentID=student.studentID, status='confirmed').all()\n        total_confirmed_hours = sum(log.hoursLogged for log in confirmed_logs)\n        accolades_count = len(student.viewAccolades())\n        leaderboard_data.append({\n            'username': student.username,\n            'studentID': student.studentID,\n            'total_hours': total_confirmed_hours,\n            'accolades': accolades_count\n        })\n\n    # Sort by total hours descending\n    leaderboard_data.sort(key=lambda x: x['total_hours'], reverse=True)\n\n    print(\"Student Leaderboard (Ranked by Confirmed Community Service Hours):\")\n    print(\"=\" * 70)\n    for rank, entry in enumerate(leaderboard_data, 1):\n        print(\n            f\"{rank}. {entry['username']} - {entry['total_hours']} hours - {entry['accolades']} accolades\"\n        )\n\n    if not leaderboard_data:\n        print(\"No students found with confirmed hours.\")\n\n\n@app.cli.command(\"view-accolades\", help=\"Student view their earned accolades\")\n@click.argument('student_username', default='student1')\ndef view_accolades_command(student_username):\n    student = Student.query.filter_by(username=student_username).first()\n    if not student:\n        print(f'Student {student_username} not found!')\n        return\n\n    # Get confirmed hours for milestone calculation\n    confirmed_logs = ActivityLog.query.filter_by(studentID=student.studentID,\n                                                 status='confirmed').all()\n    total_confirmed_hours = sum(log.hoursLogged for log in confirmed_logs)\n\n    # Update student's totalHours\n    student.totalHours = total_confirmed_hours\n    db.session.commit()\n\n    print(f\"Accolades for {student_username}:\")\n    print(f\"Total confirmed community service hours: {total_confirmed_hours}\")\n    print(\"=\" * 50)\n\n    # Check for milestones and create/award accolades if not already awarded\n    milestones = [10, 25, 50, 100, 200, 300]\n\n    for milestone in milestones:\n        if total_confirmed_hours >= milestone:\n            milestone_name = f\"{milestone} Hour Milestone\"\n\n            # Check if student already has this accolade\n            existing_accolade = Accolade.query.filter_by(\n                studentID=student.studentID, name=milestone_name).first()\n\n            if not existing_accolade:\n                # Create the accolade and award it to the student\n                new_accolade = Accolade.createAccolade(milestone_name,\n                                                       milestone)\n                Accolade.awardAccolade(student.studentID,\n                                       new_accolade.accoladeID)\n\n    # Now display the actual accolade records from the database\n    student_accolades = student.viewAccolades()\n\n    if student_accolades:\n        for i, accolade in enumerate(student_accolades, 1):\n            print(f\"{i}. {accolade.name}\")\n    else:\n        print(\"No accolades earned yet. Keep volunteering!\")\n        print(\"Next milestone: 10 hours\")\n\n\n@app.cli.command(\"staff-confirm-hours\", help=\"Staff confirm student hours\")\n@click.argument('staff_username', default='staff1')\n@click.argument('activity_log_id')\ndef staff_confirm_hours_command(staff_username, activity_log_id):\n    staff = Staff.query.filter_by(username=staff_username).first()\n    if not staff:\n        print(f'Staff {staff_username} not found!')\n        return\n\n    activity_log = ActivityLog.query.filter_by(logID=activity_log_id).first()\n    if not activity_log:\n        print(f'Activity log {activity_log_id} not found!')\n        return\n\n    if activity_log.status == 'confirmed':\n        print(f'Activity log {activity_log_id} is already confirmed!')\n        return\n\n    staff.confirmHours(activity_log_id)\n\n    # Update student's total hours\n    student = Student.query.filter_by(studentID=activity_log.studentID).first()\n    if student:\n        confirmed_logs = ActivityLog.query.filter_by(\n            studentID=student.studentID, status='confirmed').all()\n        student.totalHours = sum(log.hoursLogged for log in confirmed_logs)\n        db.session.commit()\n\n    print(f'Staff {staff_username} confirmed activity log {activity_log_id}')\n    print(f'Hours confirmed: {activity_log.hoursLogged}')\n    print(f'Activity: {activity_log.description}')\n\n\n@app.cli.command(\"update-leaderboard\",\n                 help=\"Update leaderboard entries for all students\")\ndef update_leaderboard_command():\n    students = Student.query.all()\n\n    for student in students:\n        # Calculate confirmed hours and accolades\n        confirmed_logs = ActivityLog.query.filter_by(\n            studentID=student.studentID, status='confirmed').all()\n        total_confirmed_hours = sum(log.hoursLogged for log in confirmed_logs)\n        total_accolades = len(student.viewAccolades())\n\n        # Update student's totalHours\n        student.totalHours = total_confirmed_hours\n\n        # Check if leaderboard entry exists\n        existing_entry = LeaderBoardEntry.query.filter_by(\n            studentID=student.studentID).first()\n\n        if existing_entry:\n            existing_entry.updateEntry(student)\n        else:\n            # Create new leaderboard entry\n            new_entry = LeaderBoardEntry(\n                entryID=str(uuid.uuid4()),\n                studentID=student.studentID,\n                rank=0,  # Will be calculated later\n                totalHours=total_confirmed_hours,\n                totalAccolades=total_accolades)\n            db.session.add(new_entry)\n\n    # Calculate ranks\n    entries = LeaderBoardEntry.query.order_by(desc(\n        LeaderBoardEntry.totalHours)).all()\n    for rank, entry in enumerate(entries, 1):\n        entry.rank = rank\n\n    db.session.commit()\n    print(\"Leaderboard updated successfully!\")\n\n\n# eg : flask user <command>\nuser_cli = AppGroup('user', help='User object commands')\n\n\n# Then define the command and any parameters and annotate it with the group (@)\n@user_cli.command(\"create\", help=\"Creates a user\")\n@click.argument(\"username\", default=\"rob\")\n@click.argument(\"password\", default=\"robpass\")\ndef create_user_command(username, password):\n    create_user(username, password)\n    print(f'{username} created!')\n\n\n# this command will be : flask user create bob bobpass\n\n\n@user_cli.command(\"list\", help=\"Lists users in the database\")\n@click.argument(\"format\", default=\"string\")\ndef list_user_command(format):\n    if format == 'string':\n        print(get_all_users())\n    else:\n        print(get_all_users_json())\n\n\napp.cli.add_command(user_cli)  # add the group to the cli\n'''\nTest Commands\n'''\n\ntest = AppGroup('test', help='Testing commands')\n\n\n@test.command(\"user\", help=\"Run User tests\")\n@click.argument(\"type\", default=\"all\")\ndef user_tests_command(type):\n    if type == \"unit\":\n        sys.exit(pytest.main([\"-k\", \"UserUnitTests\"]))\n    elif type == \"int\":\n        sys.exit(pytest.main([\"-k\", \"UserIntegrationTests\"]))\n    else:\n        sys.exit(pytest.main([\"-k\", \"App\"]))\n\n\napp.cli.add_command(test)\n","size_bytes":11896},"App/__init__.py":{"content":"from .models import *\nfrom .views import *\nfrom .controllers import *\nfrom .main import *","size_bytes":89},"App/config.py":{"content":"import os\n\ndef load_config(app, overrides):\n    if os.path.exists(os.path.join('./App', 'custom_config.py')):\n        app.config.from_object('App.custom_config')\n    else:\n        app.config.from_object('App.default_config')\n    app.config.from_prefixed_env()\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    app.config['PREFERRED_URL_SCHEME'] = 'https'\n    app.config['UPLOADED_PHOTOS_DEST'] = \"App/uploads\"\n    app.config['JWT_ACCESS_COOKIE_NAME'] = 'access_token'\n    app.config[\"JWT_TOKEN_LOCATION\"] = [\"cookies\", \"headers\"]\n    app.config[\"JWT_COOKIE_SECURE\"] = True\n    app.config[\"JWT_COOKIE_CSRF_PROTECT\"] = False\n    app.config['FLASK_ADMIN_SWATCH'] = 'darkly'\n    for key in overrides:\n        app.config[key] = overrides[key]","size_bytes":795},"App/database.py":{"content":"from flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\n\ndb = SQLAlchemy()\n\ndef get_migrate(app):\n    return Migrate(app, db)\n\ndef create_db():\n    db.create_all()\n    \ndef init_db(app):\n    db.init_app(app)","size_bytes":226},"App/default_config.py":{"content":"SQLALCHEMY_DATABASE_URI=\"sqlite:///temp-database.db\"\nSECRET_KEY=\"secret key\"","size_bytes":76},"App/main.py":{"content":"import os\nfrom flask import Flask, render_template\nfrom flask_uploads import DOCUMENTS, IMAGES, TEXT, UploadSet, configure_uploads\nfrom flask_cors import CORS\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.datastructures import  FileStorage\n\n\nfrom App.database import init_db\nfrom App.config import load_config\n\n\nfrom App.controllers import (\n    setup_jwt,\n    add_auth_context\n)\n\nfrom App.views import views, setup_admin\n\ndef add_views(app):\n    for view in views:\n        app.register_blueprint(view)\n\ndef create_app(overrides={}):\n    app = Flask(__name__, static_url_path='/static')\n    load_config(app, overrides)\n    CORS(app)\n    add_auth_context(app)\n    photos = UploadSet('photos', TEXT + DOCUMENTS + IMAGES)\n    configure_uploads(app, photos)\n    add_views(app)\n    init_db(app)\n    jwt = setup_jwt(app)\n    setup_admin(app)\n    @jwt.invalid_token_loader\n    @jwt.unauthorized_loader\n    def custom_unauthorized_response(error):\n        return render_template('401.html', error=error), 401\n    app.app_context().push()\n    return app","size_bytes":1055},"e2e/test.js":{"content":"const puppeteer = require('puppeteer-core');\nconst { expect, assert }  = require('chai');\nconst config = require('./config.json');\n\nlet browser;\nlet page;\nlet requests = [];\n\nconst host = 'http://localhost:8080';\n\nbefore(async function(){\n  this.timeout(config.timeout);\n  browser = await puppeteer.launch(config);\n  [page] = await browser.pages();\n\n  await page.emulateMediaType(\"screen\");\n  await page.setRequestInterception(true);\n\n  page.on('request', request => {\n    requests.push(request.url());\n    request.continue();\n  });\n\n  await page.goto(`${host}/static/users`, { waitUntil: 'networkidle2'});\n});\n\nfunction getHTML(selector){\n  return page.evaluate(selector=>{\n    try{\n      return document.querySelector(selector).outerHTML;\n    }catch(e){\n      return null;\n    }\n  }, selector);\n}\n\nfunction getInnerText(a) {\n  return page.evaluate(a => document.querySelector(a).innerText, a)\n}\n\nfunction checkElements(a) {\n  for (let [b, c] of Object.entries(a)) it(`Should have ${b}`, async () => {\n      expect(await page.$(c)).to.be.ok\n  })\n}\n\ncontext('The /static/users page', ()=>{\n\n  it('Test 1: Should send a http request to /api/users', async ()=>{\n    let reqs = [`${host}/api/users`];\n    let count = 0;\n\n    reqs.forEach(req => {\n      if(requests.includes(req))count++\n    })\n\n    expect(count).to.equal(1);\n\n  }).timeout(2000);\n\n  it(\"Test 2: Page should have App Users as the title\", async () => {\n      expect(await page.title()).to.eql(\"App Users\")\n  });\n\n  //hello im on nick branch\n\n  describe(\"Test 3: Page should have a users table header\", () => {\n    it(\"First table header should be 'Id'\", async () => {\n      const html = await page.$eval('tr>th:nth-child(1)', (e) => e.innerHTML);\n      expect(html).to.eql(\"Id\")\n    });\n\n    it(\"Second table header should be 'First Name'\", async () => {\n      const html = await page.$eval('tr>th:nth-child(2)', (e) => e.innerHTML);\n      expect(html).to.eql(\"First Name\")\n    });\n\n    it(\"Third table header should be 'Last Name'\", async () => {\n      const html = await page.$eval('tr>th:nth-child(3)', (e) => e.innerHTML);\n      expect(html).to.eql(\"Last Name\")\n    });\n\n  })\n\n  // it('Test 2: Should user table header on page', async ()=>{\n  //   await page.waitForSelector('#pokemon-detail')\n\n  //   let searchKeys = [ 'grass', '1', '6.9', '0.7' ]\n\n  //   let result = await getHTML('#pokemon-detail');\n\n  //   let count = 0;\n\n  //   for(let key of searchKeys){\n  //     if(result.includes(key))count++\n  //   }\n\n  //   expect(count).to.eql(4);\n      \n  // }).timeout(2000);\n\n\n});\n\nafter(async () => {\n  await browser.close();\n});","size_bytes":2598},"App/controllers/__init__.py":{"content":"from .user import *\nfrom .auth import *\nfrom .initialize import *\n","size_bytes":66},"App/controllers/auth.py":{"content":"from flask_jwt_extended import create_access_token, jwt_required, JWTManager, get_jwt_identity, verify_jwt_in_request\n\nfrom App.models import User\nfrom App.database import db\n\ndef login(username, password):\n  result = db.session.execute(db.select(User).filter_by(username=username))\n  user = result.scalar_one_or_none()\n  if user and user.check_password(password):\n    # Store ONLY the user id as a string in JWT 'sub'\n    return create_access_token(identity=str(user.userID))\n  return None\n\n\ndef setup_jwt(app):\n  jwt = JWTManager(app)\n\n  # Always store a string user id in the JWT identity (sub),\n  # whether a User object or a raw id is passed.\n  @jwt.user_identity_loader\n  def user_identity_lookup(identity):\n    user_id = getattr(identity, \"id\", identity)\n    return str(user_id) if user_id is not None else None\n\n  @jwt.user_lookup_loader\n  def user_lookup_callback(_jwt_header, jwt_data):\n    identity = jwt_data[\"sub\"]\n    # Use string userID for lookup\n    return db.session.get(User, identity)\n\n  return jwt\n\n\n# Context processor to make 'is_authenticated' available to all templates\ndef add_auth_context(app):\n  @app.context_processor\n  def inject_user():\n      try:\n          verify_jwt_in_request()\n          identity = get_jwt_identity()\n          current_user = db.session.get(User, identity) if identity is not None else None\n          is_authenticated = current_user is not None\n      except Exception as e:\n          print(e)\n          is_authenticated = False\n          current_user = None\n      return dict(is_authenticated=is_authenticated, current_user=current_user)","size_bytes":1589},"App/controllers/initialize.py":{"content":"from .user import create_user\nfrom App.database import db\n\n\ndef initialize():\n    db.drop_all()\n    db.create_all()\n    create_user('bob', 'bobpass')\n","size_bytes":150},"App/controllers/user.py":{"content":"from App.models import User\nfrom App.database import db\n\ndef create_user(username, password):\n    newuser = User(username=username, password=password)\n    db.session.add(newuser)\n    db.session.commit()\n    return newuser\n\ndef get_user_by_username(username):\n    result = db.session.execute(db.select(User).filter_by(username=username))\n    return result.scalar_one_or_none()\n\ndef get_user(id):\n    return db.session.get(User, id)\n\ndef get_all_users():\n    return db.session.scalars(db.select(User)).all()\n\ndef get_all_users_json():\n    users = get_all_users()\n    if not users:\n        return []\n    users = [user.get_json() for user in users]\n    return users\n\ndef update_user(id, username):\n    user = get_user(id)\n    if user:\n        user.username = username\n        # user is already in the session; no need to re-add\n        db.session.commit()\n        return True\n    return None\n","size_bytes":888},"App/models/__init__.py":{"content":"from .user import *","size_bytes":19},"App/models/user.py":{"content":"from werkzeug.security import check_password_hash, generate_password_hash\nfrom App.database import db\nfrom datetime import datetime\nimport uuid   # This is used to generate unique IDs for the users\n\nclass User(db.Model):\n    __tablename__ = 'user'\n    userID = db.Column(db.String, primary_key=True)\n    username =  db.Column(db.String(20), nullable=False, unique=True)\n    password = db.Column(db.String(120), nullable=False)\n    user_type = db.Column(db.String(20))\n    \n    __mapper_args__ = {\n        'polymorphic_identity': 'user',\n        'polymorphic_on': user_type\n    }\n\n    def __init__(self, username, password):\n        self.userID = str(uuid.uuid4())\n        self.username = username\n        self.set_password(password)\n\n    def get_json(self):\n        return{\n            'id': self.userID,\n            'username': self.username\n        }\n\n    def set_password(self, password):\n        \"\"\"Create hashed password.\"\"\"\n        self.password = generate_password_hash(password)\n    \n    def check_password(self, password):\n        \"\"\"Check hashed password.\"\"\"\n        return check_password_hash(self.password, password)\n\n    @staticmethod\n    def login(username: str, password: str) -> bool:\n        user = User.query.filter_by(username=username).first()\n        if user and user.check_password(password):\n            return True\n        return False\n\n    def logout(self) -> None:\n        pass\n\n    def changePassword(self, oldPass: str, newPass: str) -> bool:\n        if self.check_password(oldPass):\n            self.set_password(newPass)\n            return True\n        return False\n    \nclass Student(User):\n    __tablename__ = 'student'\n    studentID = db.Column(db.String, db.ForeignKey('user.userID'), primary_key=True)\n    totalHours = db.Column(db.Integer, nullable=False, default=0)\n    points = db.Column(db.Integer, nullable=False, default=0)\n    \n    __mapper_args__ = {\n        'polymorphic_identity': 'student'\n    }\n\n    def __init__(self, username, password):\n        super().__init__(username, password)\n        self.studentID = self.userID\n\n    def requestConfirmationOfHours(self, activityLogID: str) -> None:\n        activity_log = ActivityLog.query.filter_by(logID=activityLogID, studentID=self.studentID).first()\n        if activity_log and activity_log.status == \"logged\":\n            activity_log.status = \"pending\"\n            db.session.commit()\n\n    def viewLeaderboard(self) -> list:\n        return LeaderBoardEntry.query.filter_by(studentID=self.studentID).all()\n\n    def viewAccolades(self) -> list:\n        return Accolade.query.filter_by(studentID=self.studentID).all()\n\n    def logHours(self, hours: int, description: str) -> 'ActivityLog':\n        new_log = ActivityLog.createLog(self.studentID, hours, description)\n        db.session.add(new_log)\n        db.session.commit()\n        return new_log\n\nclass Accolade(db.Model):\n    accoladeID = db.Column(db.String, primary_key=True)\n    studentID = db.Column(db.String, db.ForeignKey('student.studentID'), nullable=True)\n    name = db.Column(db.String, nullable=False)\n    milestoneHours = db.Column(db.Integer, nullable=False)\n    dateAwarded = db.Column(db.DateTime, nullable=False)\n\n    def __init__(self, accoladeID, studentID, name, milestoneHours, dateAwarded):\n        self.accoladeID = accoladeID\n        self.studentID = studentID\n        self.name = name\n        self.milestoneHours = milestoneHours\n        self.dateAwarded = dateAwarded\n\n    @staticmethod\n    def createAccolade(name: str, milestone: int) -> 'Accolade':\n        new_accolade = Accolade(\n            accoladeID=str(uuid.uuid4()),\n            studentID=None,\n            name=name,\n            milestoneHours=milestone,\n            dateAwarded=datetime.utcnow()\n        )\n        db.session.add(new_accolade)\n        db.session.commit()\n        return new_accolade\n\n    @staticmethod\n    def awardAccolade(studentID: str, accoladeID: str) -> None:\n        accolade = Accolade.query.filter_by(accoladeID=accoladeID).first()\n        if accolade:\n            accolade.studentID = studentID\n            db.session.commit()\n\nclass Staff(User):\n    __tablename__ = 'staff'\n    staffID = db.Column(db.String, db.ForeignKey('user.userID'), primary_key=True)\n    \n    __mapper_args__ = {\n        'polymorphic_identity': 'staff'\n    }\n\n    def __init__(self, username, password):\n        super().__init__(username, password)\n        self.staffID = self.userID\n\n    def logHoursForStudent(self, studentID: str, hours: int, activity: str) -> 'ActivityLog':\n        \"\"\"Staff can log hours for a student\"\"\"\n        new_log = ActivityLog.createLog(studentID, hours, activity)\n        return new_log\n\n    def confirmHours(self, activityLogID: str) -> None:\n        activity_log = ActivityLog.query.filter_by(logID=activityLogID).first()\n        if activity_log and activity_log.status == \"pending\":\n            activity_log.status = \"confirmed\"\n            # Update student's total hours when confirmed\n            student = Student.query.filter_by(studentID=activity_log.studentID).first()\n            if student:\n                student.totalHours += activity_log.hoursLogged\n                # Check for accolades based on milestones\n                milestones = [10, 25, 50, 100]\n                for milestone in milestones:\n                    if student.totalHours >= milestone:\n                        # Check if accolade already exists for this student and milestone\n                        existing_accolade = Accolade.query.filter_by(\n                            studentID=student.studentID, \n                            milestoneHours=milestone\n                        ).first()\n                        if not existing_accolade:\n                            # Create and award the accolade\n                            accolade = Accolade(\n                                accoladeID=str(uuid.uuid4()),\n                                studentID=student.studentID,\n                                name=f\"{milestone} Hours Volunteer\",\n                                milestoneHours=milestone,\n                                dateAwarded=datetime.utcnow()\n                            )\n                            db.session.add(accolade)\n            db.session.commit()\n\n    def viewLeaderboard(self) -> list:\n        return LeaderBoardEntry.query.all()\n\nclass ActivityLog(db.Model):\n    logID = db.Column(db.String, primary_key=True)\n    studentID = db.Column(db.String, db.ForeignKey('student.studentID'), nullable=False)\n    hoursLogged = db.Column(db.Integer, nullable=False)\n    dateLogged = db.Column(db.DateTime, nullable=False)\n    status = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=False)\n\n    def __init__(self, logID, studentID, hoursLogged, dateLogged, status, description):\n        self.logID = logID\n        self.studentID = studentID\n        self.hoursLogged = hoursLogged\n        self.dateLogged = dateLogged\n        self.status = status\n        self.description = description\n    \n    @staticmethod\n    def createLog(studentID: str, hours: int, description: str) -> 'ActivityLog':\n        new_log = ActivityLog(\n            logID=str(uuid.uuid4()),\n            studentID=studentID,\n            hoursLogged=hours,\n            dateLogged=datetime.utcnow(),\n            status=\"logged\",\n            description=description\n        )\n        db.session.add(new_log)\n        db.session.commit()\n        return new_log\n\n    def updateStatus(self, newStatus: str) -> None:\n        self.status = newStatus\n\n    def getHoursLogged(self) -> int:\n        return self.hoursLogged\n    \nclass LeaderBoardEntry(db.Model):\n    entryID = db.Column(db.String, primary_key=True)\n    studentID = db.Column(db.String, db.ForeignKey('student.studentID'))\n    rank = db.Column(db.Integer)\n    totalHours = db.Column(db.Integer)\n    totalAccolades = db.Column(db.Integer)\n\n    def __init__(self, entryID, studentID, rank, totalHours, totalAccolades):\n        self.entryID = entryID\n        self.studentID = studentID\n        self.rank = rank\n        self.totalHours = totalHours\n        self.totalAccolades = totalAccolades\n\n    def updateEntry(self, student: Student) -> None:\n        self.totalHours = student.totalHours\n        self.totalAccolades = len(student.viewAccolades())\n        db.session.commit()\n\n    def getRank(self) -> int:\n        return self.rank","size_bytes":8361},"App/static/main.js":{"content":"\nasync function getUserData(){\n    const response = await fetch('/api/users');\n    return response.json();\n}\n\nfunction loadTable(users){\n    const table = document.querySelector('#result');\n    for(let user of users){\n        table.innerHTML += `<tr>\n            <td>${user.id}</td>\n            <td>${user.username}</td>\n        </tr>`;\n    }\n}\n\nasync function main(){\n    const users = await getUserData();\n    loadTable(users);\n}\n\nmain();","size_bytes":440},"App/static/style.css":{"content":"html {\n    padding: 0;\n}","size_bytes":24},"App/tests/__init__.py":{"content":"from .test_app import *","size_bytes":23},"App/tests/test_app.py":{"content":"import os, tempfile, pytest, logging, unittest\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\nfrom App.main import create_app\nfrom App.database import db, create_db\nfrom App.models import User\nfrom App.controllers import (\n    create_user,\n    get_all_users_json,\n    login,\n    get_user,\n    get_user_by_username,\n    update_user\n)\n\n\nLOGGER = logging.getLogger(__name__)\n\n'''\n   Unit Tests\n'''\nclass UserUnitTests(unittest.TestCase):\n\n    def test_new_user(self):\n        user = User(\"bob\", \"bobpass\")\n        assert user.username == \"bob\"\n\n    # pure function no side effects or integrations called\n    def test_get_json(self):\n        user = User(\"bob\", \"bobpass\")\n        user_json = user.get_json()\n        expected = {\"id\": user.userID, \"username\": \"bob\"}\n        self.assertDictEqual(user_json, expected)\n    \n    def test_hashed_password(self):\n        password = \"mypass\"\n        hashed = generate_password_hash(password)\n        user = User(\"bob\", password)\n        assert user.password != password\n\n    def test_check_password(self):\n        password = \"mypass\"\n        user = User(\"bob\", password)\n        assert user.check_password(password)\n\n'''\n    Integration Tests\n'''\n\n# This fixture creates an empty database for the test and deletes it after the test\n# scope=\"class\" would execute the fixture once and resued for all methods in the class\n@pytest.fixture(autouse=True, scope=\"module\")\ndef empty_db():\n    app = create_app({'TESTING': True, 'SQLALCHEMY_DATABASE_URI': 'sqlite:///test.db'})\n    create_db()\n    yield app.test_client()\n    db.drop_all()\n\n\ndef test_authenticate():\n    user = create_user(\"bob\", \"bobpass\")\n    assert login(\"bob\", \"bobpass\") != None\n\nclass UsersIntegrationTests(unittest.TestCase):\n\n    def test_create_user(self):\n        user = create_user(\"rick\", \"bobpass\")\n        assert user.username == \"rick\"\n\n    def test_get_all_users_json(self):\n        users_json = get_all_users_json()\n        # Check that we have users and they have the expected structure\n        assert len(users_json) >= 2\n        assert all('id' in user and 'username' in user for user in users_json)\n\n    # Tests data changes in the database\n    def test_update_user(self):\n        # Create a user and get their actual ID\n        user = create_user(\"test_user\", \"testpass\")\n        user_id = user.userID\n        \n        # Update the user\n        update_user(user_id, \"updated_user\")\n        updated_user = get_user(user_id)\n        assert updated_user is not None\n        assert updated_user.username == \"updated_user\"\n        \n\n","size_bytes":2575},"App/views/__init__.py":{"content":"# blue prints are imported \n# explicitly instead of using *\nfrom .user import user_views\nfrom .index import index_views\nfrom .auth import auth_views\nfrom .admin import setup_admin\n\n\nviews = [user_views, index_views, auth_views] \n# blueprints must be added to this list","size_bytes":268},"App/views/admin.py":{"content":"from flask_admin.contrib.sqla import ModelView\nfrom flask_jwt_extended import jwt_required, current_user, unset_jwt_cookies, set_access_cookies\nfrom flask_admin import Admin\nfrom flask import flash, redirect, url_for, request\nfrom App.database import db\nfrom App.models import User\n\nclass AdminView(ModelView):\n\n    @jwt_required()\n    def is_accessible(self):\n        return current_user is not None\n\n    def inaccessible_callback(self, name, **kwargs):\n        # redirect to login page if user doesn't have access\n        flash(\"Login to access admin\")\n        return redirect(url_for('index_page', next=request.url))\n\ndef setup_admin(app):\n    admin = Admin(app, name='FlaskMVC', template_mode='bootstrap3')\n    admin.add_view(AdminView(User, db.session))","size_bytes":758},"App/views/auth.py":{"content":"from flask import Blueprint, render_template, jsonify, request, flash, send_from_directory, flash, redirect, url_for\nfrom flask_jwt_extended import jwt_required, current_user, unset_jwt_cookies, set_access_cookies\n\n\nfrom.index import index_views\n\nfrom App.controllers import (\n    login,\n\n)\n\nauth_views = Blueprint('auth_views', __name__, template_folder='../templates')\n\n\n\n\n'''\nPage/Action Routes\n'''    \n\n@auth_views.route('/identify', methods=['GET'])\n@jwt_required()\ndef identify_page():\n    return render_template('message.html', title=\"Identify\", message=f\"You are logged in as {current_user.id} - {current_user.username}\")\n    \n\n@auth_views.route('/login', methods=['POST'])\ndef login_action():\n    data = request.form\n    token = login(data['username'], data['password'])\n    response = redirect(request.referrer)\n    if not token:\n        flash('Bad username or password given'), 401\n    else:\n        flash('Login Successful')\n        set_access_cookies(response, token) \n    return response\n\n@auth_views.route('/logout', methods=['GET'])\ndef logout_action():\n    response = redirect(request.referrer) \n    flash(\"Logged Out!\")\n    unset_jwt_cookies(response)\n    return response\n\n'''\nAPI Routes\n'''\n\n@auth_views.route('/api/login', methods=['POST'])\ndef user_login_api():\n  data = request.json\n  token = login(data['username'], data['password'])\n  if not token:\n    return jsonify(message='bad username or password given'), 401\n  response = jsonify(access_token=token) \n  set_access_cookies(response, token)\n  return response\n\n@auth_views.route('/api/identify', methods=['GET'])\n@jwt_required()\ndef identify_user():\n    return jsonify({'message': f\"username: {current_user.username}, id : {current_user.id}\"})\n\n@auth_views.route('/api/logout', methods=['GET'])\ndef logout_api():\n    response = jsonify(message=\"Logged Out!\")\n    unset_jwt_cookies(response)\n    return response","size_bytes":1887},"App/views/index.py":{"content":"from flask import Blueprint, redirect, render_template, request, send_from_directory, jsonify\nfrom App.controllers import create_user, initialize\n\nindex_views = Blueprint('index_views', __name__, template_folder='../templates')\n\n@index_views.route('/', methods=['GET'])\ndef index_page():\n    return render_template('index.html')\n\n@index_views.route('/init', methods=['GET'])\ndef init():\n    initialize()\n    return jsonify(message='db initialized!')\n\n@index_views.route('/health', methods=['GET'])\ndef health_check():\n    return jsonify({'status':'healthy'})","size_bytes":558},"App/views/user.py":{"content":"from flask import Blueprint, render_template, jsonify, request, send_from_directory, flash, redirect, url_for\nfrom flask_jwt_extended import jwt_required, current_user as jwt_current_user\n\nfrom.index import index_views\n\nfrom App.controllers import (\n    create_user,\n    get_all_users,\n    get_all_users_json,\n    jwt_required\n)\n\nuser_views = Blueprint('user_views', __name__, template_folder='../templates')\n\n@user_views.route('/users', methods=['GET'])\ndef get_user_page():\n    users = get_all_users()\n    return render_template('users.html', users=users)\n\n@user_views.route('/users', methods=['POST'])\ndef create_user_action():\n    data = request.form\n    flash(f\"User {data['username']} created!\")\n    create_user(data['username'], data['password'])\n    return redirect(url_for('user_views.get_user_page'))\n\n@user_views.route('/api/users', methods=['GET'])\ndef get_users_action():\n    users = get_all_users_json()\n    return jsonify(users)\n\n@user_views.route('/api/users', methods=['POST'])\ndef create_user_endpoint():\n    data = request.json\n    user = create_user(data['username'], data['password'])\n    return jsonify({'message': f\"user {user.username} created with id {user.id}\"})\n\n@user_views.route('/static/users', methods=['GET'])\ndef static_user_page():\n  return send_from_directory('static', 'static-user.html')","size_bytes":1324},"replit.md":{"content":"# Overview\n\nThis is a Flask MVC (Model-View-Controller) web application template built with Python. The application provides a structured foundation for building web applications with user management, authentication, and administrative capabilities. It follows the MVC architectural pattern to separate concerns between data models, business logic controllers, and presentation views. The template includes JWT-based authentication, database integration with SQLAlchemy, and both server-side rendered pages and client-side API endpoints.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Backend Architecture\nThe application follows a modular Flask MVC structure:\n\n- **Models**: SQLAlchemy ORM models define data structures, with a base `User` model and extended `Student` model using table inheritance. Users have UUID primary keys and secure password hashing.\n- **Controllers**: Business logic is separated into controller modules for user management, authentication, and database initialization. Controllers handle data processing and database operations.\n- **Views**: Flask blueprints organize routes into logical groups (user, auth, index, admin). Views handle HTTP requests/responses and template rendering.\n- **Templates**: Jinja2 templates provide server-side rendering with a base layout and component-specific templates.\n\n## Authentication & Authorization\nJWT (JSON Web Tokens) authentication system using Flask-JWT-Extended:\n- Cookie and header-based token storage\n- User identity resolution with database lookups\n- Context processors inject authentication state into all templates\n- Protected routes require JWT verification\n- Admin interface with role-based access control\n\n## Database Layer\nSQLAlchemy with Flask-Migrate for database management:\n- Development uses SQLite by default\n- Production-ready PostgreSQL support via psycopg2\n- Database migrations and schema versioning\n- UUID-based primary keys for better scalability\n\n## Configuration Management\nEnvironment-based configuration system:\n- Default development config with SQLite\n- Environment variable override support\n- Custom config file option for deployment-specific settings\n- Secure handling of secrets and API keys\n\n## Static Asset Management\nFlask-Uploads handles file uploads and static assets:\n- Support for documents, images, and text files\n- Configurable upload destinations\n- Static file serving for client-side applications\n\n## Testing Infrastructure\nComprehensive testing setup:\n- Unit tests for models and pure functions\n- Integration tests for database operations\n- End-to-end browser testing with Puppeteer\n- Pytest and Mocha test runners\n\n## Deployment Architecture\nProduction deployment configuration:\n- Gunicorn WSGI server with gevent workers\n- Multi-process scaling (4 workers by default)\n- Containerized deployment support via DevContainer\n- Environment-specific logging and monitoring\n\n# External Dependencies\n\n## Core Framework\n- **Flask**: Web application framework with extensions for SQLAlchemy, CORS, JWT, and Admin\n- **SQLAlchemy**: Object-relational mapping and database abstraction\n- **Flask-Migrate**: Database schema migration management\n\n## Authentication & Security\n- **Flask-JWT-Extended**: JWT token management and authentication\n- **Werkzeug**: Password hashing and security utilities\n- **Flask-CORS**: Cross-origin resource sharing support\n\n## Database\n- **SQLite**: Default development database\n- **psycopg2-binary**: PostgreSQL adapter for production deployments\n\n## Development & Testing\n- **pytest**: Python testing framework\n- **Mocha**: JavaScript testing framework for e2e tests\n- **Puppeteer**: Browser automation for end-to-end testing\n- **Chai**: JavaScript assertion library\n\n## Production Deployment\n- **Gunicorn**: WSGI HTTP server for production\n- **gevent**: Asynchronous networking library for worker processes\n\n## File Management\n- **Flask-Uploads**: File upload handling and management\n- **python-dotenv**: Environment variable management\n\n## UI Framework\n- **Materialize CSS**: Frontend CSS framework for responsive design\n- **Google Fonts**: Icon fonts and typography","size_bytes":4156},"README.md":{"content":"# Student Incentive System\n\nA Flask MVC command-line application for tracking student community service hours with staff oversight and student incentives.\n\n## Project Overview\n\nThe Student Incentive System allows staff to log community service hours for students, students to request confirmation of their hours, and provides a leaderboard system with milestone-based accolades to incentivize community service participation.\n\n## Features\n\n1. **Staff Log Hours for Students** - Staff can record community service hours for students\n2. **Student Request Confirmation** - Students can request formal confirmation of logged hours  \n3. **View Student Leaderboard** - Display ranked list of students by confirmed hours\n4. **Student View Accolades** - Students can view earned milestones (10/25/50+ hours)\n\n## Installation & Setup\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n3. Initialize the database:\n   ```bash\n   flask init\n   ```\n\n## CLI Commands Documentation\n\n### Database Initialization\n\n```bash\nflask init\n```\n**Description**: Creates and initializes the database with default users\n- Creates sample users: bob, sally, rob\n- Creates students: student1, student2\n- Creates staff: staff1, staff2\n- Sets up the database schema\n\n**Example Output**:\n```\nCreated user: bob\nCreated student: student1\nCreated student: student2\nCreated staff: staff1\nCreated staff: staff2\ndatabase intialized\n```\n\n### 1. Staff Log Hours for Student\n\n```bash\nflask staff-log-hours [staff_username] [student_username] [hours] [activity]\n```\n\n**Description**: Allows staff members to log community service hours for students\n\n**Parameters**:\n- `staff_username` (default: staff1) - Username of the staff member\n- `student_username` (default: student1) - Username of the student\n- `hours` (default: 10) - Number of hours to log\n- `activity` (default: community service) - Description of the activity\n\n**Example**:\n```bash\nflask staff-log-hours staff1 student1 15 \"volunteered at local food bank\"\n```\n\n**Example Output**:\n```\nStaff staff1 logged 15 hours for student student1\nActivity: volunteered at local food bank\nLog ID: 9f58af47-11d3-4aef-9d3f-f840a2cc05bd\n```\n\n### 2. Student Request Confirmation of Hours\n\n```bash\nflask request-confirmation [student_username] [activity_log_id]\n```\n\n**Description**: Enables students to request formal confirmation of their logged hours by staff\n\n**Parameters**:\n- `student_username` (default: student1) - Username of the student\n- `activity_log_id` (required) - ID of the activity log to request confirmation for\n\n**Example**:\n```bash\nflask request-confirmation student1 9f58af47-11d3-4aef-9d3f-f840a2cc05bd\n```\n\n**Example Output**:\n```\nStudent student1 requested confirmation for activity log 9f58af47-11d3-4aef-9d3f-f840a2cc05bd\nStatus changed to: pending\n```\n\n### 3. View Student Leaderboard\n\n```bash\nflask view-leaderboard\n```\n\n**Description**: Displays a ranked leaderboard of all students based on their confirmed community service hours\n\n**Parameters**: None\n\n**Example**:\n```bash\nflask view-leaderboard\n```\n\n**Example Output**:\n```\nStudent Leaderboard (Ranked by Confirmed Community Service Hours):\n======================================================================\n1. student2 - 30 hours - 0 accolades\n2. student1 - 15 hours - 0 accolades\n```\n\n### 4. Student View Accolades\n\n```bash\nflask view-accolades [student_username]\n```\n\n**Description**: Shows milestone accolades earned by a student based on confirmed hours\n\n**Parameters**:\n- `student_username` (default: student1) - Username of the student\n\n**Available Milestones**:\n- 10 Hour Milestone\n- 25 Hour Milestone  \n- 50 Hour Milestone\n- 100 Hour Milestone\n- 200 Hour Milestone\n- 300 Hour Milestone\n\n**Example**:\n```bash\nflask view-accolades student1\n```\n\n**Example Output**:\n```\nAccolades for student1:\nTotal confirmed community service hours: 15\n==================================================\n1. 10 Hour Milestone\n```\n\n### Additional Staff Command\n\n```bash\nflask staff-confirm-hours [staff_username] [activity_log_id]\n```\n\n**Description**: Allows staff to confirm student hours that are in pending status\n\n**Parameters**:\n- `staff_username` (default: staff1) - Username of the staff member\n- `activity_log_id` (required) - ID of the activity log to confirm\n\n**Example**:\n```bash\nflask staff-confirm-hours staff1 9f58af47-11d3-4aef-9d3f-f840a2cc05bd\n```\n\n## Complete Workflow Example\n\nHere's a complete example of the system workflow:\n\n```bash\n# 1. Initialize the database\nflask init\n\n# 2. Staff logs hours for a student\nflask staff-log-hours staff1 student1 15 \"volunteered at local food bank\"\n# Output: Log ID: 9f58af47-11d3-4aef-9d3f-f840a2cc05bd\n\n# 3. Student requests confirmation\nflask request-confirmation student1 9f58af47-11d3-4aef-9d3f-f840a2cc05bd\n\n# 4. Staff confirms the hours\nflask staff-confirm-hours staff1 9f58af47-11d3-4aef-9d3f-f840a2cc05bd\n\n# 5. View updated leaderboard\nflask view-leaderboard\n\n# 6. Student views their accolades\nflask view-accolades student1\n```\n\n## ⚠️ Important Note About Log IDs\n\n**When using the system, you MUST use the actual Log ID that gets generated!**\n\nEach time you run `flask staff-log-hours`, the system generates a unique Log ID. You must copy this exact ID (not the example one shown above) and use it in the subsequent `request-confirmation` and `staff-confirm-hours` commands.\n\n**Example of what to do:**\n\n1. Run the staff-log-hours command:\n   ```bash\n   flask staff-log-hours staff1 student1 15 \"volunteered at local food bank\"\n   ```\n   \n2. Copy the actual Log ID from the output (e.g., `c396d501-6933-4d53-9ccd-f627d7aca836`)\n\n3. Use that real Log ID in the next commands:\n   ```bash\n   flask request-confirmation student1 c396d501-6933-4d53-9ccd-f627d7aca836\n   flask staff-confirm-hours staff1 c396d501-6933-4d53-9ccd-f627d7aca836\n   ```\n\nIf you use the wrong Log ID, you'll get errors like \"Activity log not found!\"\n\n## System Architecture\n\n### Models\n- **User**: Base user model with authentication\n- **Student**: Extends User, tracks community service hours\n- **Staff**: Extends User, can log and confirm hours for students\n- **ActivityLog**: Records community service activities with confirmation status\n- **Accolade**: Milestone achievements based on confirmed hours\n- **LeaderBoardEntry**: Ranking system for student comparison\n\n### Key Features\n- **Hour Tracking**: Only confirmed hours count toward leaderboard and accolades\n- **Approval Workflow**: Hours must be requested for confirmation by students and approved by staff\n- **Milestone System**: Automatic accolade calculation based on confirmed hours\n- **Leaderboard**: Real-time ranking of students by confirmed community service hours\n\n## Technical Requirements\n\n- Python 3.x\n- Flask\n- SQLAlchemy\n- Click (for CLI)\n- SQLite (default database)\n\n## Testing\n\nAdditional commands for testing:\n\n```bash\n# User management\nflask user create [username] [password]\nflask user list [format]\n\n# Run tests\nflask test user [type]\n```\n\n## Database Schema\n\nThe system uses SQLAlchemy models with the following key relationships:\n- Students have many ActivityLogs\n- ActivityLogs track hours and confirmation status\n- Accolades are awarded based on confirmed hour milestones\n- LeaderBoard entries rank students by total confirmed hours\n\n## Status Tracking\n\nActivity logs have three possible statuses:\n- **pending**: Initial status when hours are logged\n- **confirmed**: Hours have been verified and approved by staff\n- **rejected**: Hours have been reviewed and not approved (future enhancement)\n\nOnly **confirmed** hours count toward the leaderboard rankings and accolade milestones.","size_bytes":7639}},"version":1}